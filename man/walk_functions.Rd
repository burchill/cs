% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/future_walk.R
\name{future_walk}
\alias{future_walk}
\alias{future_walk2}
\alias{future_pwalk}
\title{Supply each element in a vector to a function and collect the messages, warnings, and errors}
\usage{
future_walk(.x, .f, ..., .progress = FALSE, .options = future_options())

future_walk2(.x, .y, .f, ..., .progress = FALSE,
  .options = future_options())

future_pwalk(.l, .f, ..., .progress = FALSE, .options = future_options())
}
\arguments{
\item{.x}{A list or atomic vector.}

\item{.f}{A function, formula, or atomic vector.

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function. There
are three ways to refer to the arguments:
\itemize{
\item For a single argument function, use \code{.}
\item For a two argument function, use \code{.x} and \code{.y}
\item For more arguments, use \code{..1}, \code{..2}, \code{..3} etc
}

This syntax allows you to create very compact anonymous functions.

If \strong{character vector}, \strong{numeric vector}, or \strong{list}, it
is converted to an extractor function. Character vectors index by name
and numeric vectors index by position; use a list to index by position
and name at different levels. Within a list, wrap strings in \code{\link[=get-attr]{get-attr()}}
to extract named attributes. If a component is not present, the value of
\code{.default} will be returned.}

\item{...}{Additional arguments passed on to \code{.f}.}

\item{.progress}{A logical, for whether or not to print a progress bar for
multiprocess, multisession, and multicore plans.}

\item{.options}{The \code{future} specific options to use with the workers. This must
be the result from a call to \code{\link[=future_options]{future_options()}}.}

\item{.y}{Vectors of the same length. A vector of length 1 will
be recycled.}

\item{.l}{A list of lists. The length of \code{.l} determines the
number of arguments that \code{.f} will be called with. List
names will be used if present.}
}
\description{
Think of these functions as the \code{walk} analogues to \code{furrr}'s \code{\link[furrr]{future_map} }
functions. However, unlike \code{purrr::walk} and its ilk, these functions will
not return the same value, but will return a list of named lists, where
each named list contains a sublist of messages, warnings, and errors that
arose during the execution of the function.  \cr \cr
These functions are basically designed to be used when instead of returning
data remotely, you want to save it somewhere. The (relatively) light-weight
list they'll return will help you diagnose what went wrong, etc.
}
\details{
Underlyingly, these functions call the \code{furrr} \code{future_map} functions, but take the \code{.f} argument and essentially edit it, squeezing in a \code{zplyr::collect_all} wrapper while removing the \code{$value} element (this was done because accidentally returning huge models would slow down the parallelization considerably).
}
\seealso{
\code{\link{collected_info_to_df}}, \code{\link{.future_walk_maker}}
}
