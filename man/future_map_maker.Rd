% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/future_walk.R
\name{future_map_maker}
\alias{future_map_maker}
\title{Make your own versions of the \code{furrr} \code{future_map} functions}
\usage{
future_map_maker(.orig_function, ..., decorator_func = cs::collect_decorator)
}
\arguments{
\item{.orig_function}{the specific \code{future_map}-like function you want to base yours off of}

\item{\dots}{additional arguments to pass into \code{decorator_func}}

\item{decorator_func}{the function that you want to use to modify the given \code{.f} argument I use the term "decorator" like this is analogous to Python, but it's not 100\% accurate}
}
\description{
This function is responsible for making the \code{\link{future_walk}} and \code{\link{future_cnd_map}} sets of functions. The code used to make it is pretty helpful for understanding \R's meta-programming, and if you need to modify the input function \code{.f} to the \code{\link[furrr]{future_map}} functions, you can change the \code{decorator_func} argument to whatever you want.
}
\details{
I wanted functions that would behave with all the complexity of \code{furrr}'s \code{\link[furrr]{future_map}} functions (which, due to this complexity, are mostly a blackbox to me), while modifying the behavior of the specified input function, basically so I wouldn't have to keep on adding \code{zplyr::collect_all} to these argument functions, like: \code{furrr::future_map(c(1:4), ~zplyr::collect_all(saveRDS(...)))}. I'm inordinately proud of what I did here, making a function that would be able to take \emph{any} of the \code{future_map} functions and turn them into what I had in mind. Ooooh lawdy, I loved learning this.
}
\seealso{
\code{\link{collect_decorator}}, \code{\link{warn_about_package}}
}
